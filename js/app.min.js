/*
 * jQuery One Page Nav Plugin
 * http://github.com/davist11/jQuery-One-Page-Nav
 */

;
(function($, window, document, undefined) {

    // our plugin constructor
    var OnePageNav = function(elem, options) {
        this.elem = elem;
        this.$elem = $(elem);
        this.options = options;
        this.metadata = this.$elem.data('plugin-options');
        this.$win = $(window);
        this.sections = {};
        this.didScroll = false;
        this.$doc = $(document);
        this.docHeight = this.$doc.height();
    };

    // the plugin prototype
    OnePageNav.prototype = {
        defaults: {
            navItems: 'a',
            currentClass: 'current',
            changeHash: false,
            easing: 'swing',
            filter: '',
            scrollSpeed: 750,
            scrollThreshold: 0.5,
            begin: false,
            end: false,
            scrollChange: false
        },

        init: function() {
            // Introduce defaults that can be extended either
            // globally or using an object literal.
            this.config = $.extend({}, this.defaults, this.options, this.metadata);

            this.$nav = this.$elem.find(this.config.navItems);

            //Filter any links out of the nav
            if (this.config.filter !== '') {
                this.$nav = this.$nav.filter(this.config.filter);
            }

            //Handle clicks on the nav
            this.$nav.on('click.onePageNav', $.proxy(this.handleClick, this));

            //Get the section positions
            this.getPositions();

            //Handle scroll changes
            this.bindInterval();

            //Update the positions on resize too
            this.$win.on('resize.onePageNav', $.proxy(this.getPositions, this));

            return this;
        },

        adjustNav: function(self, $parent) {
            self.$elem.find('.' + self.config.currentClass).removeClass(self.config.currentClass);
            $parent.addClass(self.config.currentClass);
        },

        bindInterval: function() {
            var self = this;
            var docHeight;

            self.$win.on('scroll.onePageNav', function() {
                self.didScroll = true;
            });

            self.t = setInterval(function() {
                docHeight = self.$doc.height();

                //If it was scrolled
                if (self.didScroll) {
                    self.didScroll = false;
                    self.scrollChange();
                }

                //If the document height changes
                if (docHeight !== self.docHeight) {
                    self.docHeight = docHeight;
                    self.getPositions();
                }
            }, 250);
        },

        getHash: function($link) {
            return $link.attr('href').split('#')[1];
        },

        getPositions: function() {
            var self = this;
            var linkHref;
            var topPos;
            var $target;

            self.$nav.each(function() {
                linkHref = self.getHash($(this));
                $target = $('#' + linkHref);

                if ($target.length) {
                    topPos = $target.offset().top;
                    self.sections[linkHref] = Math.round(topPos);
                }
            });
        },

        getSection: function(windowPos) {
            var returnValue = null;
            var windowHeight = Math.round(this.$win.height() * this.config.scrollThreshold);

            for (var section in this.sections) {
                if ((this.sections[section] - windowHeight) < windowPos) {
                    returnValue = section;
                }
            }

            return returnValue;
        },

        handleClick: function(e) {
            var self = this;
            var $link = $(e.currentTarget);
            var $parent = $link.parent();
            var newLoc = '#' + self.getHash($link);

            if (!$parent.hasClass(self.config.currentClass)) {
                //Start callback
                if (self.config.begin) {
                    self.config.begin();
                }

                //Change the highlighted nav item
                self.adjustNav(self, $parent);

                //Removing the auto-adjust on scroll
                self.unbindInterval();

                //Scroll to the correct position
                self.scrollTo(newLoc, function() {
                    //Do we need to change the hash?
                    if (self.config.changeHash) {
                        window.location.hash = newLoc;
                    }

                    //Add the auto-adjust on scroll back in
                    self.bindInterval();

                    //End callback
                    if (self.config.end) {
                        self.config.end();
                    }
                });
            }

            e.preventDefault();
        },

        scrollChange: function() {
            var windowTop = this.$win.scrollTop();
            var position = this.getSection(windowTop);
            var $parent;

            //If the position is set
            if (position !== null) {
                $parent = this.$elem.find('a[href$="#' + position + '"]').parent();

                //If it's not already the current section
                if (!$parent.hasClass(this.config.currentClass)) {
                    //Change the highlighted nav item
                    this.adjustNav(this, $parent);

                    //If there is a scrollChange callback
                    if (this.config.scrollChange) {
                        this.config.scrollChange($parent);
                    }
                }
            }
        },

        scrollTo: function(target, callback) {
            var offset = $(target).offset().top - 100

            $('html, body').animate({
                scrollTop: offset
            }, this.config.scrollSpeed, this.config.easing, callback);
        },

        unbindInterval: function() {
            clearInterval(this.t);
            this.$win.unbind('scroll.onePageNav');
        }
    };

    OnePageNav.defaults = OnePageNav.prototype.defaults;

    $.fn.onePageNav = function(options) {
        return this.each(function() {
            new OnePageNav(this, options).init();
        });
    };

})(jQuery, window, document);
/*
! function(l) {
    var f = {
            speed: 300,
            offset: 0,
            currentClass: "active",
            updateHash: !1,
            classToParent: !1
        },
        s = {
            init: function(t, s) {
                f = l.extend(f, t), this.$navbar = l(s), this.$items = this.$navbar.find("a:not(.externals)"), this.$window = l(window), this.hashNow = void 0, this.$items.on("click", this.clicked), this.$window.on("scroll", l.proxy(this.scrollPage, this)), this.$window.on("resize", l.proxy(this.scrollPage, this))
            },
            clicked: function(t) {
                t.preventDefault();
                var s = l(this).attr("href"),
                    e = l(s).offset().top - f.offset;
                l("html, body").animate({
                    scrollTop: e
                }, f.speed)
            },
            scrollPage: function() {
                var t = this,
                    e = [],
                    s = void 0;
                t.$items.each(function() {
                    var t = l(this).attr("href"),
                        s = l(t);
                    s && e.push(s)
                });
                for (var i = 0; i < e.length; i++) {
                    var a = e[i],
                        r = a.height(),
                        n = a.offset().top,
                        o = t.$window.scrollTop(),
                        h = t.$window.height();
                    if (o <= n && r + n < o + h) {
                        s = e[i].attr("id");
                        break
                    }
                }
                if (s) {
                    if (f.updateHash) {
                        var c = "#" + s;
                        t.hashNow != c && (t.hashNow = c, history.pushState({}, "", c))
                    }
                    f.classToParent ? (t.$items.parent().removeClass(f.currentClass), l('a[href="#' + s + '"]').parent().addClass(f.currentClass)) : (t.$items.removeClass(f.currentClass), l('a[href="#' + s + '"]').addClass(f.currentClass))
                }
            }
        };
    l.fn.navpoints = function(t) {
        this.each(function() {
            Object.create(s).init(t, this)
        })
    }
}(jQuery);*/

/*!
 * @preserve
 *
 * Readmore.js jQuery plugin
 * Author: @jed_foster
 * Project home: http://jedfoster.github.io/Readmore.js
 * Licensed under the MIT license
 *
 * Debounce function from http://davidwalsh.name/javascript-debounce-function
 */
! function(t) {
    "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof exports ? module.exports = t(require("jquery")) : t(jQuery)
}(function(t) {
    "use strict";

    function e(t, e, i) {
        var o;
        return function() {
            var n = this,
                a = arguments,
                s = function() {
                    o = null, i || t.apply(n, a)
                },
                r = i && !o;
            clearTimeout(o), o = setTimeout(s, e), r && t.apply(n, a)
        }
    }

    function i(t) {
        var e = ++h;
        return String(null == t ? "rmjs-" : t) + e
    }

    function o(t) {
        var e = t.clone().css({
                height: "auto",
                width: t.width(),
                maxHeight: "none",
                overflow: "hidden"
            }).insertAfter(t),
            i = e.outerHeight(),
            o = parseInt(e.css({
                maxHeight: ""
            }).css("max-height").replace(/[^-\d\.]/g, ""), 10),
            n = t.data("defaultHeight");
        e.remove();
        var a = o || t.data("collapsedHeight") || n;
        t.data({
            expandedHeight: i,
            maxHeight: o,
            collapsedHeight: a
        }).css({
            maxHeight: "none"
        })
    }

    function n(t) {
        if (!d[t.selector]) {
            var e = " ";
            t.embedCSS && "" !== t.blockCSS && (e += t.selector + " + [data-readmore-toggle], " + t.selector + "[data-readmore]{" + t.blockCSS + "}"), e += t.selector + "[data-readmore]{transition: height " + t.speed + "ms;overflow: hidden;}",
                function(t, e) {
                    var i = t.createElement("style");
                    i.type = "text/css", i.styleSheet ? i.styleSheet.cssText = e : i.appendChild(t.createTextNode(e)), t.getElementsByTagName("head")[0].appendChild(i)
                }(document, e), d[t.selector] = !0
        }
    }

    function a(e, i) {
        this.element = e, this.options = t.extend({}, r, i), n(this.options), this._defaults = r, this._name = s, this.init(), window.addEventListener ? (window.addEventListener("load", c), window.addEventListener("resize", c)) : (window.attachEvent("load", c), window.attachEvent("resize", c))
    }
    var s = "readmore",
        r = {
            speed: 100,
            collapsedHeight: 200,
            heightMargin: 16,
            moreLink: '<a href="#">Read More</a>',
            lessLink: '<a href="#">Close</a>',
            embedCSS: !0,
            blockCSS: "display: block; width: 100%;",
            startOpen: !1,
            blockProcessed: function() {},
            beforeToggle: function() {},
            afterToggle: function() {}
        },
        d = {},
        h = 0,
        c = e(function() {
            t("[data-readmore]").each(function() {
                var e = t(this),
                    i = "true" === e.attr("aria-expanded");
                o(e), e.css({
                    height: e.data(i ? "expandedHeight" : "collapsedHeight")
                })
            })
        }, 100);
    a.prototype = {
        init: function() {
            var e = t(this.element);
            e.data({
                defaultHeight: this.options.collapsedHeight,
                heightMargin: this.options.heightMargin
            }), o(e);
            var n = e.data("collapsedHeight"),
                a = e.data("heightMargin");
            if (e.outerHeight(!0) <= n + a) return this.options.blockProcessed && "function" == typeof this.options.blockProcessed && this.options.blockProcessed(e, !1), !0;
            var s = e.attr("id") || i(),
                r = this.options.startOpen ? this.options.lessLink : this.options.moreLink;
            e.attr({
                "data-readmore": "",
                "aria-expanded": this.options.startOpen,
                id: s
            }), e.after(t(r).on("click", function(t) {
                return function(i) {
                    t.toggle(this, e[0], i)
                }
            }(this)).attr({
                "data-readmore-toggle": s,
                "aria-controls": s
            })), this.options.startOpen || e.css({
                height: n
            }), this.options.blockProcessed && "function" == typeof this.options.blockProcessed && this.options.blockProcessed(e, !0)
        },
        toggle: function(e, i, o) {
            o && o.preventDefault(), e || (e = t('[aria-controls="' + this.element.id + '"]')[0]), i || (i = this.element);
            var n = t(i),
                a = "",
                s = "",
                r = !1,
                d = n.data("collapsedHeight");
            n.height() <= d ? (a = n.data("expandedHeight") + "px", s = "lessLink", r = !0) : (a = d, s = "moreLink"), this.options.beforeToggle && "function" == typeof this.options.beforeToggle && this.options.beforeToggle(e, n, !r), n.css({
                height: a
            }), n.on("transitionend", function(i) {
                return function() {
                    i.options.afterToggle && "function" == typeof i.options.afterToggle && i.options.afterToggle(e, n, r), t(this).attr({
                        "aria-expanded": r
                    }).off("transitionend")
                }
            }(this)), t(e).replaceWith(t(this.options[s]).on("click", function(t) {
                return function(e) {
                    t.toggle(this, i, e)
                }
            }(this)).attr({
                "data-readmore-toggle": n.attr("id"),
                "aria-controls": n.attr("id")
            }))
        },
        destroy: function() {
            t(this.element).each(function() {
                var e = t(this);
                e.attr({
                    "data-readmore": null,
                    "aria-expanded": null
                }).css({
                    maxHeight: "",
                    height: ""
                }).next("[data-readmore-toggle]").remove(), e.removeData()
            })
        }
    }, t.fn.readmore = function(e) {
        var i = arguments,
            o = this.selector;
        return e = e || {}, "object" == typeof e ? this.each(function() {
            if (t.data(this, "plugin_" + s)) {
                var i = t.data(this, "plugin_" + s);
                i.destroy.apply(i)
            }
            e.selector = o, t.data(this, "plugin_" + s, new a(this, e))
        }) : "string" == typeof e && "_" !== e[0] && "init" !== e ? this.each(function() {
            var o = t.data(this, "plugin_" + s);
            o instanceof a && "function" == typeof o[e] && o[e].apply(o, Array.prototype.slice.call(i, 1))
        }) : void 0
    }
});


jQuery(document).ready(function($) {

    /**
     *  knowledge filter
     */
    $('.menu.main-menu .dropdown-toggle').click(function(e) {
        $(this).next().slideToggle();
    });

    /**
     *  sticky floating sidebar
     */

    var base_url = window.location.origin;
    var host = window.location.host;
    var pathArray = window.location.pathname.split('/');
    //console.log(pathArray[1]);

    if (pathArray[1] != 'knowledge') {
        $('#sidebar').stickySidebar({
            topSpacing: 200,
            innerWrapperSelector: '.sidebar__inner',
            containerSelector: '.container'
        });
    }
    /*
        $('#sidebar li a').navpoints({
            offset: 50
        }); */
});


jQuery(document).ready(function() {
    jQuery('#aside_floating').onePageNav({
        currentClass: "current",
        changeHash: !1,
        scrollSpeed: 750,
        scrollThreshold: .5,
        filter: "",
        easing: "swing",
        begin: function() {},
        end: function() {},
        scrollChange: function(t) {}
    });

    jQuery('#sidebar').onePageNav({
        currentClass: "current",
        changeHash: !1,
        scrollSpeed: 750,
        scrollThreshold: .5,
        filter: "",
        easing: "swing",
        begin: function() {},
        end: function() {},
        scrollChange: function(t) {}
    });
});

/* Anchorlink smooth scroll */
jQuery.noConflict();
jQuery(function($) {
    $('#sidebar a[href*=#]:not([href=#]), #aside_floating a[href*=#]:not([href=#])').click(function() {
        if (location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') ||
            location.hostname == this.hostname) {

            var target = $(this.hash),
                headerHeight = $("#sticknav").height() + 5; // Get fixed header height

            target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
            //console.log(target);
            if (target.length) {
                $('html,body').animate({
                    scrollTop: target.offset().top - 100
                }, 500);
                return false;
            }
        }
    });
});

jQuery(function($) {
    jQuery("html").click(function() {
        jQuery(".nav-dropdown").hide();
    });
    jQuery("#advanced-filter").click(function() {
        jQuery(".navbar-collapse-filter").slideToggle();
    });
    jQuery("#nav-toggle").click(function() {
        jQuery(".navbar-collapse").slideToggle();
    });
    jQuery("#nav-toggle").on("click", function() {
        this.classList.toggle("active");
    });

    $('#filter_display').change(function() {
        var current_url = window.location.href;
        var new_url_01 = updateQueryStringParameter(current_url, 'display', $(this).val());
        var new_url_02 = updateQueryStringParameter(new_url_01, 'lpage', '1');
        window.location.href = new_url_02;

    });
    $('#filter_sort').change(function() {
        var current_url = window.location.href;
        var new_url = updateQueryStringParameter(current_url, 'sort', $(this).val());
        window.location.href = new_url;
    });

    $('#filter_team').change(function() {
        var current_url = window.location.href;
        var new_url = updateQueryStringParameter(current_url, 'dteam', $(this).val());
        window.location.href = new_url;
    });

    $('#filter_list').click(function(e) {
        e.preventDefault();
        //alert('list');
        var current_url = window.location.href;
        var new_url = updateQueryStringParameter(current_url, 'layout', 'list');
        window.location.href = new_url;
    });


    $('#filter_grid').click(function(e) {
        e.preventDefault();
        //alert('grid');
        var current_url = window.location.href;
        var new_url = updateQueryStringParameter(current_url, 'layout', 'grid');
        window.location.href = new_url;
    });

});

function updateQueryStringParameter(uri, key, value) {
    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
    if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
    } else {
        return uri + separator + key + "=" + value;
    }
}

jQuery(function(t) {
    if (t("<div class='menu-btn-sub-menu'></div>").prependTo(".dropdown, .dropdown-submenu"), t(".dropdown .menu-btn-sub-menu, .dropdown-submenu .menu-btn-sub-menu").click(function() {
            t(this).hasClass("sub-menu-expanded") ? (t(this).removeClass("sub-menu-expanded"), t(this).next().next().fadeOut()) : (t(this).addClass("sub-menu-expanded"), t(this).next().next().fadeIn())
        }), t(".search-filter-wrapper .dropdown .dropdown-toggle").click(function() {
            t(this).prev().hasClass("sub-menu-expanded") ? (t(this).prev().removeClass("sub-menu-expanded"), t(this).next().fadeOut()) : (t(this).prev().addClass("sub-menu-expanded"), t(this).next().fadeIn())
        }), t(window).width() > 991, t("header").hasClass("menu--inline")) {
        var e = (i = parseInt(t(".slide-service").find(":first-child").css("padding-top"))) + t(".menu-inline").outerHeight();
        i > 0 && t(".slide-service").children(":first").css("padding-top", e)
    }
    if (t("nav").hasClass("overlay-bar")) {
        var i;
        e = (i = parseInt(t(".main-container").find(":first-child").css("padding-top"))) + t(".overlay-bar").outerHeight() - 48;
        if (i > 0) t(".main-container").children(":first").css("padding-top", e);
        else if (t(".main-container").find(":first").hasClass("hero-slider")) {
            var n = parseInt(t(".hero-slider .slides li:first-child").outerHeight()) + t(".overlay-bar").outerHeight();
            t(".hero-slider .slides li").css("height", n)
        }
    }

});
jQuery(function(t) {
    t(".close-promotion").click(function() {
        t("#promotion").fadeOut("slow")
    });
});

(function($) {
    $.fn.clickTogglex = function(func1, func2) {
        var funcs = [func1, func2];
        this.data('toggleclicked', 0);
        this.click(function() {
            var data = $(this).data();
            var tc = data.toggleclicked;
            $.proxy(funcs[tc], this)();
            data.toggleclicked = (tc + 1) % 2;
        });
        return this;
    };
}(jQuery));


jQuery(function(t) {
    t(".menu-action").click(function() {
        t('.menu-floating ul').slideToggle('slow', function() {
            t('.menu-action i').toggleClass('fa-angle-right fa-angle-left');
        });
    });
});


// When the user scrolls down 20px from the top of the document, show the button
window.onscroll = function() {
    scrollFunction()
};

function scrollFunction() {

    // var width = $(window).width();
    // var height = $(window).height();
    // alert(width + ' x ' + height);


    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        jQuery('header nav ul.main-menu ul.dropdown-menu').css({ 'visibility': 'hidden' });
        jQuery('.dropdown-menu.search-menu-box').removeClass('active');
    } else {
        jQuery('.dropdown-menu.search-menu-box').removeClass('active');
        jQuery('header nav ul.main-menu ul.dropdown-menu').css({ 'visibility': 'hidden' });
    }

    if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 300) {
        document.getElementById("btn-gotop").style.display = "block";
    } else {
        document.getElementById("btn-gotop").style.display = "none";
    }

    var myEle = document.getElementById("aside_floating");
    if (myEle) {
        if (document.body.scrollTop > 300 || document.documentElement.scrollTop > 650) {
            document.getElementById("aside_floating").style.position = "fixed";
            document.getElementById("aside_floating").style.top = "200px";
        } else {
            document.getElementById("aside_floating").style.position = "absolute";
            document.getElementById("aside_floating").style.top = "828px";
        }
    }

}

/** mega menu */
jQuery('header nav ul.main-menu li.dropdown > a').hover(function() {
    jQuery('header nav ul.main-menu li.dropdown ul.dropdown-menu:not(.search-menu-box)').css({ 'visibility': 'hidden' });
    jQuery(this).next('.dropdown-menu:not(.search-menu-box)').delay(300).css({ 'visibility': 'visible' });
});

jQuery('header nav .mega-menu-content').mouseleave(function() {
    jQuery('header nav ul.main-menu ul.dropdown-menu:not(.search-menu-box)').css({ 'visibility': 'hidden' });
});

jQuery('.close-megamenu').on('click', function() {
    jQuery('header nav ul.main-menu li.dropdown ul.dropdown-menu').css({ 'visibility': 'hidden' });
});

// When the user clicks on the button, scroll to the top of the document
function topFunction() {
    jQuery('html, body').animate({
        scrollTop: 0
    }, 'slow');
}

jQuery('.item-row_authors').readmore({
    collapsedHeight: 105,
    speed: 75,
    moreLink: '<a href="#" class="readmore-btn">Read more</a>',
    lessLink: '<a href="#" class="readmore-btn">Read less</a>'
});

jQuery('.search-menu a').click(function(e) {
    e.preventDefault();
    jQuery('.dropdown-menu.search-menu-box').toggleClass('active');
    jQuery("#searchInput").focus();
});
jQuery('header nav ul.main-menu li.dropdown:not(.search-menu,.lang_switcher)').hover(function() {
    jQuery('.dropdown-menu.search-menu-box').removeClass('active');
});

/*
jQuery(document).ready(function($) {
    if (window.location.hash) {
        var hash = window.location.hash;

        // $('html, body').animate({
        //     scrollTop: $(hash).offset().top
        // }, 500, 'swing');

        var target = $(hash);
        target = target.length ? target : hash;

        console.log(target);
        //console.log(target);
        if (target.length) {
            $('html,body').animate({
                scrollTop: target.offset().top - 110
            }, 500);
            return false;
        }


        // $('html,body').animate({
        //     scrollTop: hash.offset().top - 110
        // }, 500);
        // return false;
    }
});
*/

// vanilla JavaScript open all external link to newtab
var links = document.links;

for (var i = 0, linksLength = links.length; i < linksLength; i++) {
    if (links[i].hostname != window.location.hostname) {
        links[i].target = '_blank';
    }
}

/**
 * Dropdown download publication
 */

jQuery(function() {
    jQuery('.download-dropdown').click(function(e) {
        e.preventDefault();
        $(this).toggleClass('active');
    });

    jQuery('.pub-link-item').click(function(e) {
        var title = $(this).data('title');
        var itemDownload = $(this).attr('href');
        $('.dropdown-title').text(title);
        window.open('https://www.cifor.org/' + itemDownload, '_blank');
    });
});

jQuery(document).ready(function() {
    jQuery('.nav-main.mega-menu').show();
});